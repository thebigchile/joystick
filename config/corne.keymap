/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// LAYERS

#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUNC    3

// MACROS

#define SUPER LC(LSHIFT)
#define SUPER2 LA(LC(LSHIFT))

/ {
    chosen { zmk,matrix_transform = &five_column_transform; };

    behaviors {
        home_row: home_row {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <125>;
        };

        tap_d_playnext: tap_d_playnext {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_D_PLAYNEXT";
            #binding-cells = <0>;
            bindings = <&kp C_PLAY_PAUSE>, <&kp C_NEXT>, <&kp C_PREV>;
        };
    };

    combos {
        compatible = "zmk,combos";

        accent {
            bindings = <&kp APOSTROPHE>;
            key-positions = <8 7>;
            timeout-ms = <30>;
        };

        cap_wrd {
            bindings = <&caps_word>;
            key-positions = <16 13>;
            require-prior-idle-ms = <150>;
            timeout-ms = <50>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 2>;
            timeout-ms = <30>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 6>;
            timeout-ms = <30>;
        };

        L_parenthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        R_Parenthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        mute_combo {
            bindings = <&kp C_MUTE>;
            key-positions = <4 14>;
        };

        L_Brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <23 22>;
            timeout-ms = <30>;
        };

        R_Brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
            require-prior-idle-ms = <0>;
            timeout-ms = <30>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <8 9>;
            layers = <3>;
        };

        caps {
            bindings = <&kp CAPS>;
            key-positions = <3 6>;
        };

        Lay3 {
            bindings = <&tog 1>;
            key-positions = <32 33>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        MAC {
            label = "MAC";
            bindings = <
  &kp Q              &kp W                 &kp E                     &kp R                   &kp T        &kp Y      &kp U                    &kp I                      &kp O                  &kp P
  &home_row LCTRL A  &home_row LEFT_ALT S  &home_row LEFT_COMMAND D  &home_row LEFT_SHIFT F  &kp G        &kp H      &home_row RIGHT_SHIFT J  &home_row RIGHT_COMMAND K  &home_row RIGHT_ALT L  &home_row RIGHT_CONTROL SEMICOLON
  &kp Z              &kp X                 &kp C                     &kp V                   &kp B        &kp N      &kp M                    &kp COMMA                  &kp DOT                &kp FSLH
                                           &kp ESC                   &kp BSPC                &lt 2 TAB    &lt 3 DEL  &kp SPACE                &kp ENTER
            >;
        };

        win {
            label = "win";
            bindings = <
  &kp Q                 &kp W                 &kp E                     &kp R                   &kp T        &kp Y      &kp U                    &kp I                     &kp O                  &kp P
  &home_row LEFT_GUI A  &home_row LEFT_ALT S  &home_row LEFT_CONTROL D  &home_row LEFT_SHIFT F  &kp G        &kp H      &home_row RIGHT_SHIFT J  &home_row LEFT_CONTROL K  &home_row RIGHT_ALT L  &home_row RIGHT_GUI SEMICOLON
  &kp Z                 &kp X                 &kp C                     &kp V                   &kp B        &kp N      &kp M                    &kp COMMA                 &kp DOT                &kp FSLH
                                              &kp ESC                   &kp BSPC                &lt 4 TAB    &lt 3 DEL  &kp SPACE                &kp ENTER
            >;
        };

        lower_layer {
            bindings = <
  &kp LG(LS(NUMBER_4))  &kp PG_DN  &kp UP     &kp PG_UP  &kp C_VOLUME_UP      &kp N7        &kp N8  &kp N9   &kp MINUS  &kp C_AL_CALCULATOR
  &kp LG(A)             &kp LEFT   &kp DOWN   &kp RIGHT  &kp C_VOLUME_DOWN    &kp N4        &kp N5  &kp N6   &kp PLUS   &kp STAR
  &kp LG(Z)             &kp LG(X)  &kp LG(C)  &kp LG(V)  &tap_d_playnext      &kp N1        &kp N2  &kp N3   &kp FSLH   &none
                                   &kp ESC    &none      &lt 2 ESCAPE         &lt 3 DELETE  &kp N0  &kp RET
            >;

            label = "Num";
        };

        raise_layer {
            bindings = <
  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH      &kp DOLLAR      &kp PERCENT      &kp GRAVE     &kp HOME      &none         &kp END  &none
  &kp CARET        &kp EQUAL    &kp PLUS      &kp UNDERSCORE  &kp BACKSLASH    &bt BT_SEL 3  &none         &none         &none    &none
  &kp AMPERSAND    &kp TILDE    &kp ASTERISK  &kp MINUS       &kp PIPE         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none    &none
                                &none         &none           &bt BT_NXT       &none         &none         &none
            >;

            label = "Sym";
        };

        layer_4 {
            label = "window_num";
            bindings = <
  &kp PRINTSCREEN  &kp PG_DN  &kp UP     &kp PG_UP  &kp C_VOLUME_UP      &kp N7        &kp N8  &kp N9   &kp MINUS  &kp C_AL_CALCULATOR
  &kp LC(A)        &kp LEFT   &kp DOWN   &kp RIGHT  &kp C_VOLUME_DOWN    &kp N4        &kp N5  &kp N6   &kp PLUS   &kp STAR
  &kp LC(Z)        &kp LC(X)  &kp LC(C)  &kp LC(V)  &tap_d_playnext      &kp N1        &kp N2  &kp N3   &kp FSLH   &none
                              &kp ESC    &none      &lt 2 ESCAPE         &lt 3 DELETE  &kp N0  &kp RET
            >;
        };
    };
};
